css 选择器的介绍:
简单选择器:
    Type选择器
    Id 选择器
        #id{

        }
    class 选择器
        .name{
            
        }
        class=name

属性选择器:
    E[foo]
    E[foo="bar"]
    E[foo~="bar]
    E[foo^="bar"]
    E[foo$="bar]
    E[foo*="bar"]

上下文选择器:
e1 e2
e1 > e2
e1 ~ e2
e1 + e2
*

伪类选择器
e:first-child
e:last-child
e:nth-child(n)

UI伪类选择器:
    a:visited
    a:link
    a:hover
    e:focus
    e:checked
    e:target

伪元素选择器:
    E::first-letter
    E::first-line
    E::before
    E::after
font:
font-family:
font-size
font-style
font-weight
font:

浮动:
    让默认上下的排列元素变成左右排列
    float:xxxx(left, right)//将元素从body中拿出
清除:
    clear: 清楚其他元素的浮动对其的影响

----------------------------------------------------------------------



Javascript:
    字符串: 
        \ 转义符号
        ""和''都课代表字符串
    多行字符串:
        `` 表示一个整体块
    模板字符串:
        ${}
        eg1:
        var name = 'XiaoMing';
        var age = 16;
        var message ='Hello' + name + age + 'years old';
        eg2:
        var name = 'XiaoMing';
        var age = 16;
        var message ='Hello' + ${name} + ${age} + 'years old';
    操作字符串:
        var s= 'Hello';
        1.s.length;
        2.#{对字符串的某个索引赋值不会改变该字符串的值, 而是返回一个新字符串}
        3.toUpperCase()
        4.toLowerCase()
        5.IndexOf()
        6.substring(e1,[e2])
    数组:
        1.length的值会导致Array的大小变化
        2.array的索引会直接修改数组的值
        3.索引超过数组的范围后赋值仍然会修改Array[越界访问索引(奇怪的特性)]
        4.indexOf()[搜索指定元素返回其索引]
        5.slice() 截取片断
        6.push()/pop() 对数组的最后一个元素进行压入和弹出的操作
        7.unshift()/shift() 和6tips相反对第一个元素进行添加和删除
        8.sort()
        9. reverse()
        *10.splice()
            var arr = [q,w,w,e,r,t]
            arr.splice(index, num_of_delete, add_eles1,...,)
                返回值: 删除的元素
                arr修改值: 删除元素后的数组 + 添加的元素
        11.concat() 连接
        12.join('') 将元素用指定的字符串连接起来然后输出
        13.多维数组
    对象:
        1.var xiaoming={
            name:'xiaoming';
            birth:1333;
        }//利用键值对来表示对象, CSS也是这样来做
        2. 属性名包含特殊字符的时候可以给属性名加上'', 访问的时候不能用点而是用['arr_name']
        3.JavaScript规定，访问不存在的属性不报错，而是返回undefined
            从而我们可以在对象定义范围的外面对其进行定义新的属性
            用in来查看该对象是否具有该属性
    循环和条件判断:
        1.和C语言相同
        2.但是for新增了一种语句:
            for...in(和python类似)[将对象(包括数组)的所有属性显示出来]
        var o = {
            name:'Jack';
            age:20;
            city:'BeiJing';
        }
        for(var key in o){
            console.log(key);
        }
        ps:
            过滤掉对象的继承属性可以用hasOwnProperty()来实现
            o.hasOwnproperty(key)
    Map and Set:
        1.Map 函数:
            建立映射关系
        2.Map([[key:value,[key_1;value_1],....,]])
        3.Map建立的映射关系查找速度不随查找范围的变化而减小
        
        4.Set 函数:
            建立集合关系
            集合的特性是无重复元素, 从而建立Set的过程中重复元素会被过滤掉
            但是建立的Set可以用索引来查value,(不存在无序性...)
    iterable:
        1.for ... of和 for ... in 的区别
        for...in遍历的是对象的属性名
        for...of循环集合本身的元素
        2.forEach(function(element(value), index(key), array))
        3.forEach对某些参数不感兴趣就可以忽略
--------------------------------------------------------------------------
    函数定义和调用:
    1. funciton abs(x){
            if(x>0){
                return x;
            }else{
                return -x;
            }
        }
    2.  对象的定义方法:
        var abs=fuction(x){
            if(x>=0){
                return x;
            }else{
                return -x;
            }
        };
        ###下面这个函数是个匿名函数, 特别注意最后一行有';' 代表其是一个赋值语句(命名语句)
                fuction(x){
                    if(x>=0){
                        return x;
                    }else{
                        return -x;
                    }
                };
    3.调用函数:
        参数过多不报错
        参数过少 报NAN
        反正就是不报错{
            为了避免该情况的产生;
            我们在函数体内加一个语句:
                if(typeof x !== 'number'){
                    throw 'Not a number';
                }
            警报语句;
        }
    4.arguments:
        作用其实和C语言main函数中的main(int arg, char *agrv[])
        中的agrv[]很像;
        指向参数, 将参数作为其元素
        #利用这个arguments我们其实有了一种遍历的方法
        #源码分析:
        function foo(x) {
        console.log('x = ' + x); // 10
            for (var i=0; i<arguments.length; i++) {
                console.log('arg ' + i + ' = ' + arguments[i]); // 10, 20, 30
            }
        }
        foo(10, 20, 30);
        //这个程序传入x=10, arguments = [10, 20, 30]
    5.rest:
        function foo(a, b, ...rest){
            console.log('a=' + a);
            console.log('b=' + b);
            console.log(rest);
        }
        #rest参数只能卸载最后, 前面要用...标识, rest时 数组对象
    6.JavaScript特性:
        在行末补';'
        很多时候的分行要注意, 最好加上{}代码块

    
    变量作用域和解构赋值:
    1. 外部变量不能访问内部变量:
    2. 内部变量和外部变量同名的时候, 函数由内向外查找变量名
    3. 变量提升:
        ###JavaScript语言有个特性:
            扫描整个函数体, 将变量名全部提到函数顶部
            但是只会提升变量的声明, 而不会提升变量的>赋值顺序<
        eg:
            function foo() {
                var x = 'Hello, ' + y;
                console.log(x);
                var y = 'Bob';
            }
            foo(); 
        输出:   Hello, undefined 

        为了避免该特性造成的bug, 我们在函数体的顶部自己先声明变量:
        var
            x = 1;
            y = x+1;
            z,i;
    4. 全局作用域:
       ## window时js默认的一个全局变量
    5.名字空间:
        为了减少js的命名冲突; 我们在文件中可以把自己的变量全部绑定到一个全局
        变量中
    6. 局部变量的一个问题(for)
        在C++语言中
        for(int i,i<100,i++){

        }
        很明显i只是作用子啊这一个小括号内部, 但是在js中for
        不是一个函数, var i 后 i会继续存在在这一个函数中
        这个时候需要我们使用####let语句###

        let: 和var一样是声明变量的, 但是其可以只在一个代码块中作用
    7.常量的定义:
        和C++差不多
        const i=1000;
    *8. 解构赋值:
        8.1
        python的一个特性之一, 很有用
        eg:
            var [x,y,z] = [1,2,3]
        从而将1,2,3分别赋值给了x,y,z

        8.2
        从对象中直接取出元素:
        eg:
        var person = {
            name: '小明',
            age: 20,
            gender: 'male',
            passport: 'G-12345678',
            school: 'No.4 middle school'
        };
        var {name, age, passport} = person;

        8.3
        嵌套的元素也可以直接赋值, 把握好层次关系就好了
    9. 方法:
        9.1
        对象里面的函数体:
            var xiaoming={
                name:"xiaoming";
                birth: 1990;
                age: function(){
                    var y = new Date().getFullYear();
                    return y-this.birth;
                }
            }
        9.2
            this的用法:
                ##this始终指向当前对象(当前对象可能是全局变量)
                ------------------------
                |var fn = xiaoming.age;|
                |fn();                 |
                ------------------------
                这样写, 也不行:因为是先拿到了age函数; 其this将会指向windows
                ##注意: 保证this指向正确必须得写成: obj.xxx()
                ##注意: 在strict的条件下this会指向undefined
                ##eg:
                    'use strict';
                    var xiaoming = {
                        name: '小明',
                        birth: 1990,
                        age: function () {
                            function getAgeFromBirth() {
                                var y = new Date().getFullYear();
                                return y - this.birth;
                            }
                            return getAgeFromBirth();
                        }
                    };
                    ~在上述代码中, 很遗憾this还是只会指向undefined, 因为 this只在age方法函数内指向xiaoming
                    修复的方法有: 用that捕捉this
                    在age方法的函数体内先声明: var that = this; 然后在重构函数体内用that来指代
                    反正注意一点的就是this想要它指向其所在的对象必须要在其函数体内
        10.apply/call:
            修复独立函数调用中的this指向问题
            function getAge() {
                var y = new Date().getFullYear();
                return y - this.birth;
            }

            var xiaoming = {
                name: '小明',
                birth: 1990,
                age: getAge
            };

            xiaoming.age(); // 25
            
            getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空
            getAge.call(xiaoming);

            注意apply和call的唯一区别就是一个是打包成数组, 一个是按顺序传递参数
        11. 装饰器
            利用apply/call函数的特性, 我们可以在系统固定的函数中再加入我们新的语句函数
            eg:
                'use strict'
                var count = 0;
                var oldParseInt = parseInt;
                window.parseInt = function(){
                    count += 1;
                    return oldParseInt.apply(null, arguments);
                };
        
------------------------------------------------------------------------------------
        高阶函数:
           一个函数能接受函数作为参数 
            从而可以让函数的类型作为变量, 调用不同函数, 增强函数的灵活性
        1.map/reduce:
            1.1map
            map是映射的意思, 将一个集合(数列)映射到另外一个集合, map的输入参数是映射关系(函数)
            eg:
            function pow(x){
                return x*x;
            }
            var array_0 = [0,1,2,3,4];
            var results = array_0.map(pow);

            1.2 reduce: 简化
        2. filter()
            和map类似但是是过滤的作用, 输入的函数返回true or false 来判断是否删掉元素
        3.回调函数:
            var arr = ['A', 'B', 'C'];
            var r = arr.filter(function (element, index, self) {
                console.log(element); // 依次打印'A', 'B', 'C'
                console.log(index); // 依次打印0, 1, 2
                console.log(self); // self就是变量arr
                return true;
            });
        4. 排序:
            #坑: 默认的排序算法是将数组中的元素全部转换为字符串然后根据ASCII码进行排序

        5.闭包:
            



    
